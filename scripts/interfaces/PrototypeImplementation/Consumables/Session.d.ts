import { IAction0 } from "../../Interfaces/IAction0.js";
import { IAction1 } from "../../Interfaces/IAction1.js";
import { IAction2 } from "../../Interfaces/IAction2.js";
import { IDeviceStream } from "../../Interfaces/IDeviceStream.js";
import { IFileArgs } from "../../Interfaces/IFileArgs.js";
import { IFileStream } from "../../Interfaces/IFileStream.js";
import { ILayout } from "../../Interfaces/ILayout.js";
import { IOutboundSessionInvite } from "../../Interfaces/IOutboundSessionInvite.js";
import { IParticipant } from "../../Interfaces/IParticipant.js";
import { IScreenStream } from "../../Interfaces/IScreenStream.js";
import { ISendArgs } from "../../Interfaces/ISendArgs.js";
import { ISendStatus } from "../../Interfaces/ISendStatus.js";
import { IDevicePlayArgs, IDeviceStreamArgs, IError, IPlayArgs, IScreenPlayArgs, IScreenStreamArgs, ISession, SessionState, IFileStreamArgs } from "../../Interfaces/ISession.js";
import { IStream } from "../../Interfaces/IStream.js";
import { MessageArgs } from "./MessageArgs.js";
import { ReceiveArgs } from "./ReceiveArgs.js";
import { SendArgs } from "./SendArgs.js";
export declare class Session implements ISession {
    onIncomingMessage: IAction2<Session, MessageArgs & ReceiveArgs>;
    state: SessionState;
    onStateChange?: IAction2<ISession, SessionState>;
    leave(): void;
    sendMessage: (args?: MessageArgs & SendArgs) => ISendStatus;
    get me(): IParticipant;
    get screenStream(): IScreenStream;
    get screenStreams(): IScreenStream[];
    get deviceStream(): IDeviceStream;
    get deviceStreams(): IDeviceStream[];
    autoplayDeviceCameraStreams?: boolean;
    autoplayDeviceMicrophoneStreams?: boolean;
    autoplayStreams?: boolean;
    participants?: IParticipant[];
    startScreenStream(args?: IScreenStreamArgs): Promise<IScreenStream>;
    startDeviceStream(args?: IDeviceStreamArgs): Promise<IDeviceStream>;
    playStreams(): void;
    playScreenStreams(args?: IScreenPlayArgs): void;
    playDeviceStreams(args?: IDevicePlayArgs): void;
    onDeviceStreamAdded?: IAction2<ISession, IDeviceStream>;
    onDeviceStreamRemoved?: IAction2<ISession, IDeviceStream>;
    onScreenStreamAdded?: IAction2<ISession, IScreenStream>;
    onScreenStreamRemoved?: IAction2<ISession, IScreenStream>;
    onStreamAdded?: IAction2<ISession, IStream>;
    onStreamRemoved?: IAction2<ISession, IStream>;
    isHeld: boolean;
    hold(): void;
    resume(): void;
    layout: ILayout;
    autoplayScreenDisplayStreams?: boolean;
    private static cameraAndMircophoneConnectionTag;
    private static screenAndSystemAudioConnectionTag;
    private liveSwitchChannel;
    private _LiveSwitchClient;
    private defaultConfig;
    private _invitation?;
    private gotInvitation;
    private notifyLeave;
    private _videoContainer;
    constructor(channel: string, liveSwitchClient: fm.liveswitch.Client, notifyLeave: IAction0, videoContainer?: HTMLElement, invitation?: fm.liveswitch.ChannelInvitation);
    private sfuUpstreamConnection;
    private sfuDownstreamConnections;
    private OnClientJoinInAChannel;
    id: string;
    private messageDataChannel?;
    private dataChannelConnection?;
    private canSendMessages;
    private openMcuConnectionForDataChannel;
    private _Direction;
    private openSfuDownstreamConnection;
    private openSfuUpstreamConnection;
    private upstreamState;
    private downstreamState;
    private updateUpstreamState;
    private updateDownstreamState;
    autoplayScreenSystemAudioStreams?: boolean;
    onpeertypingmessage: IAction1<string>;
    notifyTyping(): void;
    playFileStreams(args?: IPlayArgs): void;
    error: IError;
    sendFile(args?: IFileArgs & ISendArgs): ISendStatus;
    startFileStream(args?: IFileStreamArgs): Promise<IFileStream>;
    fileStream?: IFileStream | undefined;
    fileStreams?: IFileStream[] | undefined;
    inviteUser(userId: string): IOutboundSessionInvite;
    inviteClient(clientId: string): IOutboundSessionInvite;
    invitePhone(phoneNumber: string): IOutboundSessionInvite;
    invites?: IOutboundSessionInvite[];
    stopRecording(): void;
    kickParticipant(participantId: string, reason: string): boolean;
    onkicked?: IAction2<ISession, string>;
    autoplayFileStreams?: boolean;
    startRecording(): void;
    connecting(): Promise<ISession>;
    connected(): Promise<ISession>;
    terminated(): Promise<ISession>;
}
