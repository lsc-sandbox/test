import { IStream, StreamState } from "../../Interfaces/IStream.js";
import { ISink } from "../../Interfaces/ISink.js";
import { IView } from "../../Interfaces/ILayout.js";
import { IAction2 } from "../../Interfaces/IAction2.js";
import { ISource } from "../../Interfaces/ISource.js";
import { IAction1 } from "../../Interfaces/IAction1.js";
import { IParticipant } from "../../Interfaces/IParticipant.js";
import { ISubStream } from "../../Interfaces/ISubStream.js";
import { StreamType } from "../../Interfaces/StreamType.js";
import { IPlayArgs } from "../../Interfaces/ISession.js";
export declare class Stream implements IStream {
    start(): void;
    stop(): void;
    onstarted?: IAction1<IStream>;
    onstopped?: IAction1<IStream>;
    get audioSink(): ISink;
    get videoSink(): ISink;
    get audioSource(): ISource;
    get audioSourceDeviceId(): string;
    get videoSource(): ISource;
    get videoSourceDeviceId(): string;
    private _isMine;
    get isMine(): boolean;
    origin: IParticipant;
    data?: ISubStream;
    private _id;
    get id(): string;
    private _tag;
    get tag(): string;
    set tag(tag: string);
    streamType: StreamType;
    view?: IView;
    onstatechange: IAction2<IStream, StreamState>;
    constructor(isMine: boolean, onStateChange: IAction1<StreamState>, streamType: StreamType, video?: ISubStream, audio?: ISubStream);
    state?: StreamState;
    connected(): Promise<IStream>;
    disconnected(): Promise<IStream>;
    play(args?: IPlayArgs): void;
    audio?: ISubStream;
    video?: ISubStream;
}
